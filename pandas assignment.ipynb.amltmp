{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Pandas\n",
        "\n",
        "### Instructions\n",
        "\n",
        "This assignment will be done completely inside this Jupyter notebook with answers placed in the cell provided.\n",
        "\n",
        "All python imports that are needed shown.\n",
        "\n",
        "Follow all the instructions in this notebook to complete these tasks.    \n",
        "\n",
        "Make sure the CSV data files is in the same folder as this notebook - alumni.csv, groceries.csv"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Imports needed to complete this assignment\n",
        "\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "outputs": [],
      "execution_count": 2,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 1 :  Import CSV file (1 Mark)\n",
        "\n",
        "\n",
        "Write code to load the alumni csv dataset into a Pandas DataFrame called 'alumni'.\n"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "ls"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            " \u001b[0m\u001b[01;32mLICENSE\u001b[0m*  \u001b[01;32m'Pandas Assignment.ipynb'\u001b[0m*   \u001b[01;32malumni.csv\u001b[0m*\r\n"
          ]
        }
      ],
      "execution_count": 6,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#q1 (1)\n",
        "alumni = pd.read_csv ('alumni.csv')"
      ],
      "outputs": [],
      "execution_count": 3,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 2 :  Understand the data set (5 Marks)\n",
        "\n",
        "Use the following pandas commands to understand the data set: a) head, b) tail, c) dtypes, d) info, e) describe "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#a) (1)\n",
        "alumni.head()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 4,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Gender</th>\n      <th>Marital Status</th>\n      <th>Diploma Type</th>\n      <th>Defaulted</th>\n      <th>Salary</th>\n      <th>Fee</th>\n      <th>Savings ($)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2004</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>125000</td>\n      <td>10869</td>\n      <td>$86,000</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2005</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>College Prep Diploma</td>\n      <td>No</td>\n      <td>100000</td>\n      <td>10869</td>\n      <td>$116,000</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>70000</td>\n      <td>10869</td>\n      <td>$52,000</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>120000</td>\n      <td>10869</td>\n      <td>$76,000</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2006</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>95000</td>\n      <td>11948</td>\n      <td>$52,000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "   Year Graduated  Gender Marital Status          Diploma Type Defaulted  \\\n0            2004    Male         Single      Standard Diploma       Yes   \n1            2005    Male        Married  College Prep Diploma        No   \n2            2006  Female         Single      Standard Diploma       Yes   \n3            2007    Male        Married      Standard Diploma        No   \n4            2006  Female       Divorced      Standard Diploma       Yes   \n\n   Salary    Fee Savings ($)  \n0  125000  10869     $86,000  \n1  100000  10869    $116,000  \n2   70000  10869     $52,000  \n3  120000  10869     $76,000  \n4   95000  11948     $52,000  "
          },
          "metadata": {}
        }
      ],
      "execution_count": 4,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#b) (1)\n",
        "alumni.tail()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 5,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Gender</th>\n      <th>Marital Status</th>\n      <th>Diploma Type</th>\n      <th>Defaulted</th>\n      <th>Salary</th>\n      <th>Fee</th>\n      <th>Savings ($)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>83</th>\n      <td>2007</td>\n      <td>Male</td>\n      <td>Single</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$16,000</td>\n    </tr>\n    <tr>\n      <th>84</th>\n      <td>2008</td>\n      <td>M</td>\n      <td>Single</td>\n      <td>College Prep Diploma</td>\n      <td>Yes</td>\n      <td>65000</td>\n      <td>12066</td>\n      <td>$72,000</td>\n    </tr>\n    <tr>\n      <th>85</th>\n      <td>2009</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>75000</td>\n      <td>12066</td>\n      <td>$46,000</td>\n    </tr>\n    <tr>\n      <th>86</th>\n      <td>2005</td>\n      <td>Female</td>\n      <td>Divorced</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>100000</td>\n      <td>12067</td>\n      <td>$32,000</td>\n    </tr>\n    <tr>\n      <th>87</th>\n      <td>2006</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>Yes</td>\n      <td>75000</td>\n      <td>12067</td>\n      <td>$67,000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "    Year Graduated  Gender Marital Status          Diploma Type Defaulted  \\\n83            2007    Male         Single      Standard Diploma        No   \n84            2008       M         Single  College Prep Diploma       Yes   \n85            2009    Male        Married      Standard Diploma        No   \n86            2005  Female       Divorced      Standard Diploma       Yes   \n87            2006    Male        Married      Standard Diploma       Yes   \n\n    Salary    Fee Savings ($)  \n83   75000  12066     $16,000  \n84   65000  12066     $72,000  \n85   75000  12066     $46,000  \n86  100000  12067     $32,000  \n87   75000  12067     $67,000  "
          },
          "metadata": {}
        }
      ],
      "execution_count": 5,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#c) (1)\n",
        "alumni.dtypes"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 7,
          "data": {
            "text/plain": "Year Graduated     int64\nGender            object\nMarital Status    object\nDiploma Type      object\nDefaulted         object\nSalary             int64\nFee                int64\nSavings ($)       object\ndtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 7,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#d) (1)\n",
        "alumni.info()"
      ],
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 88 entries, 0 to 87\n",
            "Data columns (total 8 columns):\n",
            "Year Graduated    88 non-null int64\n",
            "Gender            88 non-null object\n",
            "Marital Status    88 non-null object\n",
            "Diploma Type      88 non-null object\n",
            "Defaulted         88 non-null object\n",
            "Salary            88 non-null int64\n",
            "Fee               88 non-null int64\n",
            "Savings ($)       88 non-null object\n",
            "dtypes: int64(3), object(5)\n",
            "memory usage: 5.6+ KB\n"
          ]
        }
      ],
      "execution_count": 8,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#e) (1)\n",
        "alumni.describe()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 9,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Salary</th>\n      <th>Fee</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>88.000000</td>\n      <td>88.000000</td>\n      <td>88.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>2006.477273</td>\n      <td>84090.909091</td>\n      <td>11708.727273</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>1.560852</td>\n      <td>21234.128008</td>\n      <td>1110.647949</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>2004.000000</td>\n      <td>35000.000000</td>\n      <td>10869.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>2005.000000</td>\n      <td>75000.000000</td>\n      <td>10968.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>2006.500000</td>\n      <td>75000.000000</td>\n      <td>11696.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>2008.000000</td>\n      <td>90000.000000</td>\n      <td>12058.250000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>2009.000000</td>\n      <td>160000.000000</td>\n      <td>20960.000000</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "       Year Graduated         Salary           Fee\ncount       88.000000      88.000000     88.000000\nmean      2006.477273   84090.909091  11708.727273\nstd          1.560852   21234.128008   1110.647949\nmin       2004.000000   35000.000000  10869.000000\n25%       2005.000000   75000.000000  10968.000000\n50%       2006.500000   75000.000000  11696.000000\n75%       2008.000000   90000.000000  12058.250000\nmax       2009.000000  160000.000000  20960.000000"
          },
          "metadata": {}
        }
      ],
      "execution_count": 9,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 3 :  Cleaning the data set - part A (3 Marks)\n",
        "\n",
        "a) Use clean_currency method below to strip out commas and dollar signs from Savings ($) column and put into a new column called 'Savings'."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "def clean_currency(curr):\n",
        "    return float(curr.replace(\",\", \"\").replace(\"$\", \"\"))\n",
        "\n",
        "clean_currency(\"$66,000\")\n",
        " "
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 10,
          "data": {
            "text/plain": "66000.0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 10,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#a) (2)\n",
        "alumni['Savings'] = alumni ['Savings ($)'].apply(clean_currency)"
      ],
      "outputs": [],
      "execution_count": 12,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "b) Uncomment 'alumni.dtypes.Savings' to check that the type change has occurred"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#b) (1)\n",
        "alumni.dtypes.Savings"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 13,
          "data": {
            "text/plain": "dtype('float64')"
          },
          "metadata": {}
        }
      ],
      "execution_count": 13,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 4 :  Cleaning the data set - part B (5 Marks)\n",
        "\n",
        "a) Run the 'alumni[\"Gender\"].value_counts()' to see the incorrect 'M' fields that need to be converted to 'Male'"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# a) (1)\n",
        "alumni[\"Gender\"].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 14,
          "data": {
            "text/plain": "Male      46\nFemale    39\nM          3\nName: Gender, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 14,
      "metadata": {
        "scrolled": true
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "b) Now use a '.str.replace' on the 'Gender' column to covert the incorrect 'M' fields. Hint: We must use ^...$ to restrict the pattern to match the whole string. "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# b) (1)\n",
        "alumni['Gender'].str.replace('^[M]$' , 'Male')"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 15,
          "data": {
            "text/plain": "0       Male\n1       Male\n2     Female\n3       Male\n4     Female\n       ...  \n83      Male\n84      Male\n85      Male\n86    Female\n87      Male\nName: Gender, Length: 88, dtype: object"
          },
          "metadata": {}
        }
      ],
      "execution_count": 15,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# b) (1)\n"
      ],
      "outputs": [],
      "execution_count": 13,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "c) That didn't the set alumni[\"Gender\"] column however. You will need to update the column when using the replace command 'alumni[\"Gender\"]=<replace command>', show how this is done below"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# c) (1)\n",
        "alumni['Gender'] = alumni['Gender'].str.replace('^[M]$' , 'Male')"
      ],
      "outputs": [],
      "execution_count": 16,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "d) You can set it directly by using the df.loc command, show how this can be done by using the 'df.loc[row_indexer,col_indexer] = value' command to convert the 'M' to 'Male'"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# d) (1)\n",
        "alumni [alumni [\"Gender\"] == 'M']['Gender']"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 19,
          "data": {
            "text/plain": "Series([], Name: Gender, dtype: object)"
          },
          "metadata": {}
        }
      ],
      "execution_count": 19,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "e) Now run the 'value_counts' for Gender again to see the correct columns - 'Male' and 'Female' "
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# e) (1)\n",
        "alumni['Gender'].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 21,
          "data": {
            "text/plain": "Male      49\nFemale    39\nName: Gender, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 21,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 5 :  Working with the data set (4)\n",
        "\n",
        "a) get the median, b) mean and c) standard deviation for the 'Salary' column"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# a)(1)\n",
        "alumni ['Salary'].median()\n"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 22,
          "data": {
            "text/plain": "75000.0"
          },
          "metadata": {}
        }
      ],
      "execution_count": 22,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# b)(1)\n",
        "alumni ['Salary'].mean()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 23,
          "data": {
            "text/plain": "84090.90909090909"
          },
          "metadata": {}
        }
      ],
      "execution_count": 23,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# c)(1)\n",
        "alumni ['Salary'].std()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 24,
          "data": {
            "text/plain": "21234.128008173615"
          },
          "metadata": {}
        }
      ],
      "execution_count": 24,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "d) identify which alumni paid more than $15000 in fees, using the 'Fee' column"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# d) (1)\n",
        "alumni[alumni.Fee > 15000]"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 25,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year Graduated</th>\n      <th>Gender</th>\n      <th>Marital Status</th>\n      <th>Diploma Type</th>\n      <th>Defaulted</th>\n      <th>Salary</th>\n      <th>Fee</th>\n      <th>Savings ($)</th>\n      <th>Savings</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>18</th>\n      <td>2006</td>\n      <td>Male</td>\n      <td>Married</td>\n      <td>Standard Diploma</td>\n      <td>No</td>\n      <td>140000</td>\n      <td>20960</td>\n      <td>$72,000</td>\n      <td>72000.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "    Year Graduated Gender Marital Status      Diploma Type Defaulted  Salary  \\\n18            2006   Male        Married  Standard Diploma        No  140000   \n\n      Fee Savings ($)  Savings  \n18  20960     $72,000  72000.0  "
          },
          "metadata": {}
        }
      ],
      "execution_count": 25,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 6 :  Visualise the data set (4 Marks)\n",
        "\n",
        "a) Using the 'Diploma Type' column, plot a bar chart and show its value counts."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#a) (1)\n",
        "alumni['Diploma Type'].value_counts().plot (kind='bar')"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 27,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f0d56afce80>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 27,
      "metadata": {
        "scrolled": false
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "b) Now create a box plot comparison between 'Savings' and 'Salary' columns"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#b) (1)\n",
        "alumni [['Savings' , 'Salary']].plot (kind = 'box')"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 30,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f0d5484d5f8>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 30,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "c) Generate a histogram with the 'Salary' column and use 12 bins."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#c) (1)\n",
        "alumni['Salary'].plot(kind = 'hist' , bins = 12)"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 32,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f0d56782978>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 32,
      "metadata": {}
    },
    {
      "cell_type": "markdown",
      "source": [
        "d) Generate a scatter plot comparing 'Salary' and 'Savings' columns."
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "#d) (1)\n",
        "alumni.plot(kind= 'scatter', x = 'Savings', y= 'Salary')"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 33,
          "data": {
            "text/plain": "<matplotlib.axes._subplots.AxesSubplot at 0x7f0d82f717b8>"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": "<Figure size 432x288 with 1 Axes>"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "execution_count": 33,
      "metadata": {
        "scrolled": true
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Question 7 :  Contingency Table (2 Marks)\n",
        "\n",
        "Using both the 'Martial Status' and 'Defaulted' create a contingency table. Hint: crosstab"
      ],
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "# Q7 (2)\n",
        "alumni['Marital Status'].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 36,
          "data": {
            "text/plain": "Married     35\nSingle      34\nDivorced    19\nName: Marital Status, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 36,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "alumni['Defaulted'].value_counts()"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 37,
          "data": {
            "text/plain": "Yes    52\nNo     36\nName: Defaulted, dtype: int64"
          },
          "metadata": {}
        }
      ],
      "execution_count": 37,
      "metadata": {}
    },
    {
      "cell_type": "code",
      "source": [
        "pd.crosstab(index = alumni ['Marital Status'], columns = alumni['Defaulted'])"
      ],
      "outputs": [
        {
          "output_type": "execute_result",
          "execution_count": 38,
          "data": {
            "text/html": "<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>Defaulted</th>\n      <th>No</th>\n      <th>Yes</th>\n    </tr>\n    <tr>\n      <th>Marital Status</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Divorced</th>\n      <td>8</td>\n      <td>11</td>\n    </tr>\n    <tr>\n      <th>Married</th>\n      <td>19</td>\n      <td>16</td>\n    </tr>\n    <tr>\n      <th>Single</th>\n      <td>9</td>\n      <td>25</td>\n    </tr>\n  </tbody>\n</table>\n</div>",
            "text/plain": "Defaulted       No  Yes\nMarital Status         \nDivorced         8   11\nMarried         19   16\nSingle           9   25"
          },
          "metadata": {}
        }
      ],
      "execution_count": 38,
      "metadata": {}
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python",
      "version": "3.6.9",
      "mimetype": "text/x-python",
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "pygments_lexer": "ipython3",
      "nbconvert_exporter": "python",
      "file_extension": ".py"
    },
    "kernel_info": {
      "name": "python3"
    },
    "nteract": {
      "version": "nteract-front-end@1.0.0"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 2
}